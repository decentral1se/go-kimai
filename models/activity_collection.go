// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActivityCollection activity collection
//
// swagger:model ActivityCollection
type ActivityCollection struct {

	// billable
	// Required: true
	Billable *bool `json:"billable"`

	// The assigned color in HTML hex format, eg. #dd1d00
	Color string `json:"color,omitempty"`

	// Description of this activity
	Comment string `json:"comment,omitempty"`

	// Internal ID
	ID int64 `json:"id,omitempty"`

	// Meta fields
	//
	// All visible meta (custom) fields registered with this activity
	MetaFields []*ActivityMeta `json:"metaFields"`

	// Name of this activity
	// Required: true
	// Max Length: 150
	// Min Length: 2
	Name *string `json:"name"`

	// parent title
	ParentTitle string `json:"parentTitle,omitempty"`

	// project
	Project int64 `json:"project,omitempty"`

	// Teams
	//
	// If no team is assigned, everyone can access the activity
	Teams []*Team `json:"teams"`

	// Whether this activity is visible and can be used for timesheets
	// Required: true
	Visible *bool `json:"visible"`
}

// Validate validates this activity collection
func (m *ActivityCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisible(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityCollection) validateBillable(formats strfmt.Registry) error {

	if err := validate.Required("billable", "body", m.Billable); err != nil {
		return err
	}

	return nil
}

func (m *ActivityCollection) validateMetaFields(formats strfmt.Registry) error {
	if swag.IsZero(m.MetaFields) { // not required
		return nil
	}

	for i := 0; i < len(m.MetaFields); i++ {
		if swag.IsZero(m.MetaFields[i]) { // not required
			continue
		}

		if m.MetaFields[i] != nil {
			if err := m.MetaFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metaFields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metaFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivityCollection) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 150); err != nil {
		return err
	}

	return nil
}

func (m *ActivityCollection) validateTeams(formats strfmt.Registry) error {
	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivityCollection) validateVisible(formats strfmt.Registry) error {

	if err := validate.Required("visible", "body", m.Visible); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this activity collection based on the context it is used
func (m *ActivityCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetaFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityCollection) contextValidateMetaFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetaFields); i++ {

		if m.MetaFields[i] != nil {
			if err := m.MetaFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metaFields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metaFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivityCollection) contextValidateTeams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Teams); i++ {

		if m.Teams[i] != nil {
			if err := m.Teams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActivityCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActivityCollection) UnmarshalBinary(b []byte) error {
	var res ActivityCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
